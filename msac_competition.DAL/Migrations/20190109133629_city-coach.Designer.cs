// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using msac_competition.DAL.EF;

namespace msac_competition.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190109133629_city-coach")]
    partial class citycoach
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("msac_competition.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<int?>("CityId");

                    b.Property<DateTime?>("DaTeOfBirth");

                    b.Property<string>("Lastname");

                    b.Property<string>("Name");

                    b.Property<int>("Sex");

                    b.Property<int?>("SportRank");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Afisha");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("FinishedAt");

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<DateTime>("StatedAt");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Fst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Fsts");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Sportman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<int?>("CoachId");

                    b.Property<DateTime>("DaTeOfBirth");

                    b.Property<string>("Lastname");

                    b.Property<string>("Name");

                    b.Property<int>("Sex");

                    b.Property<int>("SportRank");

                    b.Property<string>("Surname");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TeamId");

                    b.ToTable("Sportmen");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.SportmanCompetition", b =>
                {
                    b.Property<int?>("SportmanId");

                    b.Property<int?>("CompetitionId");

                    b.HasKey("SportmanId", "CompetitionId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("SportmenCompetitions");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<int?>("CoachId");

                    b.Property<int?>("FstId");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CoachId")
                        .IsUnique()
                        .HasFilter("[CoachId] IS NOT NULL");

                    b.HasIndex("FstId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.TeamCompetition", b =>
                {
                    b.Property<int?>("TeamId");

                    b.Property<int?>("CompetitionId");

                    b.HasKey("TeamId", "CompetitionId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("TeamCompetitions");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.City", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Coach", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.City", "City")
                        .WithMany("Coaches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Sportman", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.Coach", "Coach")
                        .WithMany("Sportmen")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("msac_competition.DAL.Entities.Team", "Team")
                        .WithMany("Sportmen")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.SportmanCompetition", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.Competition", "Competition")
                        .WithMany("SportmenCompetitions")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("msac_competition.DAL.Entities.Sportman", "Sportman")
                        .WithMany("SportmanCompetitions")
                        .HasForeignKey("SportmanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.Team", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.City", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId");

                    b.HasOne("msac_competition.DAL.Entities.Coach", "Coach")
                        .WithOne("Team")
                        .HasForeignKey("msac_competition.DAL.Entities.Team", "CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("msac_competition.DAL.Entities.Fst", "Fst")
                        .WithMany("Teams")
                        .HasForeignKey("FstId");
                });

            modelBuilder.Entity("msac_competition.DAL.Entities.TeamCompetition", b =>
                {
                    b.HasOne("msac_competition.DAL.Entities.Competition", "Competition")
                        .WithMany("TeamCompetitions")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("msac_competition.DAL.Entities.Team", "Team")
                        .WithMany("TeamCompetitions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
